import math

def evaluate(board):
    # Check rows, columns, and diagonals for a win
    for row in range(3):
        if board[row][0] == board[row][1] == board[row][2] != '-':
            return board[row][0]
        if board[0][row] == board[1][row] == board[2][row] != '-':
            return board[0][row]
    if board[0][0] == board[1][1] == board[2][2] != '-':
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] != '-':
        return board[0][2]
    return None

def is_terminal(board):
    # Check if the board is full or if someone has won
    return evaluate(board) is not None or '-' not in [cell for row in board for cell in row]

def minimax(board, depth, is_maximizing):
    if is_terminal(board):
        score = evaluate(board)
        return score if score else 0
    if is_maximizing:
        max_score = -math.inf
        for row in range(3):
            for col in range(3):
                if board[row][col] == '-':
                    board[row][col] = 'O'
                    score = minimax(board, depth + 1, False)
                    board[row][col] = '-'
                    max_score = max(max_score, score)
        return max_score
    else:
        min_score = math.inf
        for row in range(3):
            for col in range(3):
                if board[row][col] == '-':
                    board[row][col] = 'X'
                    score = minimax(board, depth + 1, True)
                    board[row][col] = '-'
                    min_score = min(min_score, score)
        return min_score

def best_move(board):
    best_score = -math.inf
    best_move = None
    for row in range(3):
        for col in range(3):
            if board[row][col] == '-':
                board[row][col] = 'O'
                score = minimax(board, 0, False)
                board[row][col] = '-'
                if score > best_score:
                    best_score = score
                    best_move = (row, col)
    return best_move

# Example Tic-Tac-Toe board
board = [
    ['X', 'O', 'X'],
    ['-', 'O', '-'],
    ['-', '-', 'X']
]

# Find the best move for 'O'
print("Best move for 'O':", best_move(board))
